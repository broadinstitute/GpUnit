#
# Configure a GpUnit test run.
#
# This is a standard properties file which is loaded by the ant script before running your tests.
#
# You have several options to set custom properties:
# (1) Make edits to this file
# (2) Pass properties on the ant command-line, e.g.
#    ant -Dgp.user=test_user
# (3) Create a 'gpunit.default.properties' file
# The 'gpunit.default.properties' file is always loaded first. Properties in that file take 
# precedence over non-command line properties defined elsewhere.
#
# (4) Create a site-specific gpunit.config directory.  For example, to maintain separate configurations 
# for multiple servers.
# ~/gpunit/config/server-01/
#     gpunit.properties
#     gpunit_keystore.jks
# ~/gpunit/config/server-02/
#     gpunit.properties
#     gpunit_keystore.jks
# Use the -Dbasedir=<path> to select a custom config folder. E.g.
#     ant -Dbasedir=~/gpunit/config/server-01 ...

#gp.host=genepatternbeta.broadinstitute.org
#gp.port=:8080
#gp.url=http://genepatternbeta.broadinstitute.org:8080
gp.host=127.0.0.1
gp.url=http://127.0.0.1:8080
gp.user=my_user
gp.password=my_password

#-------------------------------------------
# Test user name and password
#-------------------------------------------
# Some modules (like OpenCRAVAT) require a username and password to access a service
# This is the default test user info saved in our private repo rather than in 
# the gpunit itself
# the syntax would be "<module.username.paramter>": <%gpunit.test.useremail%>
gpunit.test.username=test
gpunit.test.useremail=gp-dev@broadinstitute.org
gpunit.test.userpassword=test

# Set to true to force assertions/diffs to be executed and verified locally
# (causes results files to be downloaded).
gpunit.localAssertions=true

#--------------------------------------------
# Data set locations
#--------------------------------------------
#
# Locations of folders containing test data:
#
gpunit.testData=ftp://gpftp.broadinstitute.org
gpunit.gpData=ftp://ftp.broadinstitute.org/pub/genepattern/datasets
#
# Root folder for expected results data (the path specified by this property
# must be locally accessible from the  machine running GpUnit).
#
# Linux
gpunit.resultData=/xchip/gpdev/gpftp/pub
# Windows
#gpunit.resultData=\\\\iodine\\xchip_gpdev\\gpftp\\pub
# Mac
#gpunit.resultData=smb://iodine/xchip_gpdev/gpftp/pub
#
#--------------------------------------------

# Diff argument (unrecognized on Windows)
gpunit.diffStripTrailingCR=--strip-trailing-cr
#gpunit.diffStripTrailingCR=

#
# the 'gpunit.testfolder' is the root directory for 
#     the test-case files.
#
#gpunit.testfolder=${gpunit.dir}/tests/protocols

#
# number of tests to run simultaneously
#
gpunit.numThreads=5

# A note regarding the Timeouts below:
# Do not use all three at the same time, and certainly not all three at the same time with the same value.

#
# the amount of time, in seconds, to wait for all tests to complete
# the jobs which have not yet completed will not be recorded in the junit test report
# this should rarely come into play because the 'gpunit.testTimeout' and/or the 'gpunit.jobCompletionTimeout'
# will occur first, under normal circumstances
#
# on shutdowmTimeout, all parallel junit tests are terminated unceremoniously
#
# gpunit.shutdownTimeout=1500

#
# the total amount of time, in seconds, to wait for each junit test to complete
# including the time it takes to submit the job to the GP server,
# to run on the server, and to validate the results.
#
# on testTimeout, the junit test will fail with a timeout error
#
# gpunit.testTimeout=1200

#
# Preferred Method #
#
# the amount of time, in seconds, to poll for job completion
# 
# on jobCompletionTimeout, the junit test will fail with a timeout error
#
gpunit.jobCompletionTimeout=900

#
# directory where you would like the junit reports to be output - relative to where gpunit is being run or full path
#
#report.dir=reports

###############################################
# SOAP API client test
###############################################
# Set 'gpunit.client=SOAP' to test the legacy SOAP API
# Default client is 'REST'

######################################
# options for handling job input files
######################################
# root directory for uploading input files from the local machine
#gpunit.upload.dir=./tests/testGpUnit/filepath/upload_dir
# root directory for server file paths on the server
#gpunit.server.dir=/xchip/gpdev/shared_data/gp_unit/filepath
# [not implemented] root directory for expected output files on the local machine
#gpunit.diff.dir=./tests/testGpUnit/expected_output

######################################
# options for handling job result files
######################################
# location for downloading job results files, for each job in a batch of tests
#gpunit.outputdir=./jobResults
# when gpunit.batch.name is not set, a new folder will be created (based on the timestamp)
# see the build.xml file for more details
#gpunit.batch.name=latest
# by default result files are deleted after each run
# set this flag to true in order to keep your downloaded result files
gpunit.save.downloads=true
# for debugging, save the json output from the rest api call to get the status of the completed job
# Template:
#     HTTP GET {gp.url}/gp/rest/v1/jobs/{jobId}
# Example:
#     HTTP GET http://127.0.0.1:8080/gp/rest/v1/jobs/1713
# turned on logging of REST call to help debug build 325 errors
gpunit.save.job.json=true
# by default completed jobs are deleted from the server after each passing test
# if the test fails, the job will remain on the server
gpunit.delete.jobs=false
